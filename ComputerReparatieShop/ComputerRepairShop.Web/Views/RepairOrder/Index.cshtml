@model ComputerRepairShop.Web.ViewModels.RepairOrderPostViewModel
@using ComputerRepairShop.Data.Models
@using ComputerRepairShop.ClassLibrary.Const;
@{
    ViewBag.Title = "Repair orders";
}

@{ 
    string landingMsg = string.Empty;
    if (User.IsInRole(RoleNames.Customer))
    {
        landingMsg = "Repairs for" + User.Identity.Name;
    }
    else 
    { 
        landingMsg = "Repairs for Computer Repair Shop";
    }
}
<div class="jumbotron">
    <h1></h1>
    <p class="lead">@landingMsg</p>
    @Html.ActionLink("Create", "Create", null, new { @class = "btn btn-primary btn-lg" })
    <p><a class="btn btn-primary btn-lg">create more &raquo;</a></p>
</div>
@if(!User.IsInRole(RoleNames.Customer))
{
    @Html.Partial("_ProgressBar", Model);
}

<table class="table table-hover">
    <thead class="thead-dark">
        <tr>
            <th>@Html.DisplayNameFor(model => model.RepairOrders.FirstOrDefault().Name)</th>
            <th>@Html.DisplayNameFor(model => model.RepairOrders.FirstOrDefault().Status)</th>
            <th>@Html.DisplayNameFor(model => model.RepairOrders.FirstOrDefault().StartDate)</th>
            <th>@Html.DisplayNameFor(model => model.RepairOrders.FirstOrDefault().EndDate)</th>
            <th>Manage</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var repairOrder in Model.RepairOrders)
        {
            string orderToolate = "On time";
        <script>
                const orderStatus = @repairOrder.Status;
                const orderCreatedTimeInTicks = @repairOrder.StartDate.Ticks;
                const orderDeliverTimeInTicks = @repairOrder.EndDate.Ticks;
                @orderToolate = checkIfOrderTooLate(orderStatus, orderCreatedTimeInTicks, orderDeliverTimeInTicks)
        </script>
            <tr>
                <td>@repairOrder.Name</td>
                <td style="text-align:center" class="@repairOrder.Status">@repairOrder.Status</td>
                <td class="functio">@repairOrder.StartDate.ToString("dddd, dd MMMM yyyy")</td>
                <td class="">@repairOrder.EndDate.ToString("dddd, dd MMMM yyyy")</td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = repairOrder.Id }, new { @class = "btn btn-outline-secondary" })
                    @Html.ActionLink("Details", "Details", new { id = repairOrder.Id, model = repairOrder }, new { @class = "btn btn-outline-secondary" })
                    @if (!User.IsInRole(RoleNames.Customer))
                    {
                        @Html.ActionLink("Delete", "Delete", new { id = repairOrder.Id }, new { @class = "btn btn-outline-secondary" })
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


<script>
    function checkIfOrderTooLate(orderStatus, orderCreatedTimeInTicks, orderDeliverTimeInTicks) {
        const currentTimeInTicks = @DateTime.Now.Ticks;
        let returnString = "On time"; 
        if ((orderStatus == "Pending" && orderCreatedTimeInTicks > currentTimeInTicks) || (orderStatus !== "Done" && orderDeliverTimeInTicks > currentTimeInTicks))
        returnString = "TooLate";

        return returnString
    }
</script>
